"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import datetime
import os
import sys
from pathlib import Path


def get_env_bool(env_var, default=False):
    return os.environ.get(env_var, default).lower() == "true"


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get("DEBUG", default=0))

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "").split(" ")

# Application definition

INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.postgres",
    "django.contrib.staticfiles",
    # 3rd Party
    "corsheaders",
    "drf_material",
    "rest_framework",
    "rest_framework_simplejwt.token_blacklist",
    "anymail",
    "django_celery_beat",
    "drf_spectacular",
    # Local
    "account",
    "main",
    "worker",
    "experiment",
    "payment",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "config.wsgi.application"
ASGI_APPLICATION = "config.asgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("SQL_DATABASE", os.path.join(BASE_DIR, "db.sqlite3")),
        "USER": os.environ.get("SQL_USER", "user"),
        "PASSWORD": os.environ.get("SQL_PASSWORD", "password"),
        "HOST": os.environ.get("SQL_HOST", "localhost"),
        "PORT": os.environ.get("SQL_PORT", "5432"),
    }
}

# Test settings
if "test" in sys.argv:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": ":memory:",
        }
    }

    # Disable migrations for tests
    class DisableMigrations:
        def __contains__(self, item):
            return True

        def __getitem__(self, item):
            return None

    MIGRATION_MODULES = DisableMigrations()

    # Disable unnecessary apps during testing
    INSTALLED_APPS = [
        app
        for app in INSTALLED_APPS
        if app
        not in [
            "django_celery_beat",
            "anymail",
            "drf_spectacular",
        ]
    ]

    # Use fast MD5 hasher for tests
    PASSWORD_HASHERS = [
        "django.contrib.auth.hashers.MD5PasswordHasher",
    ]


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation."
        "UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "account.User"


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
}

SPECTACULAR_SETTINGS = {
    "TITLE": "BaseBuild API",
    "DESCRIPTION": "API documentation for the BaseBuild application foundation",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "persistAuthorization": True,
        "displayOperationId": False,
        "defaultModelsExpandDepth": -1,
        "defaultModelExpandDepth": 2,
        "docExpansion": "none",
    },
    "COMPONENT_SPLIT_REQUEST": True,
    "SCHEMA_PATH_PREFIX": "/api/",
}

# Allow the use of the browsable API in development
if DEBUG:
    REST_FRAMEWORK["DEFAULT_RENDERER_CLASSES"] = list(
        REST_FRAMEWORK.get("DEFAULT_RENDERER_CLASSES", [])
    ) + [
        "rest_framework.renderers.BrowsableAPIRenderer",
    ]

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": datetime.timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": datetime.timedelta(days=1),
    "USER_ID_CLAIM": "id",
}

CORS_ORIGIN_WHITELIST = [
    "http://localhost:3001",
]

REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379")

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [REDIS_URL],
        },
    },
}

if DEBUG and not os.environ.get("USE_POSTMARK_IN_DEV", False):
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
else:
    ANYMAIL = {
        "POSTMARK_SERVER_TOKEN": os.environ.get(
            "POSTMARK_API_SERVICE_KEY", "POSTMARK_API_KEY"
        )
    }
    EMAIL_BACKEND = os.environ.get(
        "EMAIL_BACKEND", "anymail.backends.postmark.EmailBackend"
    )

OTP_EXPIRATION_MINUTES = os.environ.get("OTP_EXPIRATION_MINUTES", 5)
FRONTEND_URL = os.environ.get("FRONTEND_URL", "http://localhost:3001")
DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL", "no-reply@test.io")

CELERY_BROKER_URL = os.environ.get("CELERY_BROKER", "redis://broker:6379/0")
CELERY_RESULT_BACKEND = os.environ.get("CELERY_BACKEND", "redis://broker:6379/0")

# Retry and task execution settings
CELERY_TASK_DEFAULT_RETRY_DELAY = int(
    os.environ.get("CELERY_TASK_DEFAULT_RETRY_DELAY", 60)
)
CELERY_TASK_MAX_RETRIES = int(os.environ.get("CELERY_TASK_MAX_RETRIES", 3))
CELERY_TASK_ACKS_LATE = bool(int(os.environ.get("CELERY_TASK_ACKS_LATE", 1)))
CELERY_TASK_TIME_LIMIT = int(os.environ.get("CELERY_TASK_TIME_LIMIT", 300))
CELERY_TASK_SOFT_TIME_LIMIT = int(os.environ.get("CELERY_TASK_SOFT_TIME_LIMIT", 240))

# performance
CELERY_WORKER_CONCURRENCY = int(os.environ.get("CELERY_WORKER_CONCURRENCY", 1))
CELERY_WORKER_PREFETCH_MULTIPLIER = int(os.environ.get("CELERY_PREFETCH_MULTIPLIER", 1))

# Rate limiting
CELERY_TASK_DEFAULT_RATE_LIMIT = (
    f"{os.environ.get('CELERY_TASK_DEFAULT_RATE_LIMIT', 1)}/s"
)

# Queue settings
CELERY_TASK_DEFAULT_QUEUE = os.environ.get("CELERY_TASK_DEFAULT_QUEUE", "default")

# Monitoring and debugging
CELERY_WORKER_LOG_LEVEL = os.environ.get("CELERY_WORKER_LOG_LEVEL", "INFO")
CELERY_TRACK_STARTED = bool(int(os.environ.get("CELERY_TRACK_STARTED", 1)))

# Celery Beat settings
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

OWNER_EMAIL = os.environ.get("OWNER_EMAIL", "test@test.com")

APP_NAME = os.environ.get("APP_NAME", "BaseBuild")

# Test Runner
TEST_RUNNER = "tests.test_runner.CollectOnlyTestRunner"

# STRIPE
PAYMENT_REQUIRED = get_env_bool("PAYMENT_REQUIRED", "True")
STRIPE_PUBLISHABLE_KEY = os.environ.get("STRIPE_PUBLISHABLE_KEY")
STRIPE_SECRET_KEY = os.environ.get("STRIPE_SECRET_KEY")

# Product Feature Master List
MASTER_FEATURE_LIST = {
    "BaseBuild": {
        "priority_support": {
            "display_name": "Priority Support",
            "description": "Access to 24/7 priority support",
            "included": False,
        },
        "unlimited_projects": {
            "display_name": "Unlimited Projects",
            "description": "Create unlimited projects",
            "included": False,
        },
        "team_members": {
            "display_name": "Team Members",
            "description": "Invite team members to your projects",
            "included": False,
        },
    },
}

# LOGGING
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": os.environ.get("LOG_LEVEL", "INFO") if not DEBUG else "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.getenv(
                "LOG_FILE_PATH", os.path.join(BASE_DIR, "application.log")
            ),
            "maxBytes": 1024 * 1024 * 5,  # 5 MB
            "backupCount": int(os.environ.get("LOG_BACKUP_COUNT", 5)),
            "formatter": "verbose",
        },
        "error_file": {
            "level": "ERROR",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.getenv(
                "ERROR_LOG_FILE_PATH", os.path.join(BASE_DIR, "error.log")
            ),
            "maxBytes": 1024 * 1024 * 5,  # 5 MB
            "backupCount": int(os.environ.get("LOG_BACKUP_COUNT", 5)),
            "formatter": "verbose",
        },
        "console": {
            "level": os.getenv("CONSOLE_LOG_LEVEL", "ERROR") if not DEBUG else "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file", "error_file"],
            "level": "ERROR" if not DEBUG else "INFO",
            "propagate": True,
        },
        "django.db.backends": {
            "handlers": ["file"],  # Use file handler for SQL query logging
            "level": "ERROR",  # Set level to ERROR to suppress most SQL query logging
            "propagate": False,
        },
        "custom_logger": {
            "handlers": ["console", "file"],
            "level": "INFO" if not DEBUG else "DEBUG",
            "propagate": False,
        },
        "error_logger": {
            "handlers": ["error_file"],
            "level": "ERROR",
            "propagate": False,
        },
        "django.email": {"handlers": ["console"], "level": "DEBUG", "propagate": True},
    },
}
